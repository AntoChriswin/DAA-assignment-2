def fourSum(nums, target):
    nums.sort()  # Sort the array
    n = len(nums)
    result = []  # Result list to store quadruplets

    for i in range(n - 3):
        # Skip duplicate elements for the first element
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n - 2):
            # Skip duplicate elements for the second element
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left, right = j + 1, n - 1

            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]

                if current_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])

                    # Move left and right pointers and skip duplicates
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1

                    left += 1
                    right -= 1

                elif current_sum < target:
                    left += 1  # Increase the sum by moving the left pointer to the right

                else:
                    right -= 1  # Decrease the sum by moving the right pointer to the left

    return result
print(fourSum([2,2,2,2,2],8))
