class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeNthFromEnd(head, n):
    dummy = ListNode(0)
    dummy.next = head
    first = dummy
    second = dummy

    # Move first n+1 steps ahead
    for _ in range(n + 1):
        first = first.next

    # Move both first and second until first reaches the end
    while first:
        first = first.next
        second = second.next

    # Remove the nth node
    second.next = second.next.next

    return dummy.next


# Helper function to convert list to ListNode
def list_to_listnode(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next


# Helper function to convert ListNode to list
def listnode_to_list(node):
    lst = []
    while node:
        lst.append(node.val)
        node = node.next
    return lst


# Test the function
head = list_to_listnode([1, 2, 3, 4, 5])
n = 2
new_head = removeNthFromEnd(head, n)
print(listnode_to_list(new_head))  # Output: [1, 2, 3, 5]
